generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String?
  password  String
  avatarUrl String?
  isSeller  Boolean   @default(false)
  isAdmin   Boolean   @default(false)
  products  Product[]
  reviews   Review[]
  favorites Favorite[]
  orders    Order[]   @relation("UserOrders")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
}

model Product {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  price       Float
  condition   String
  seller      User           @relation(fields: [sellerId], references: [id])
  sellerId    Int
  category    Category?      @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  images      ProductImage[]
  reviews     Review[]
  favorites   Favorite[]
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  OrderItem OrderItem[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
}

model Favorite {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
  @@unique([userId, productId])
}

model Order {
  id        Int         @id @default(autoincrement())
  buyer     User        @relation("UserOrders", fields: [buyerId], references: [id])
  buyerId   Int
  items     OrderItem[]
  total     Float
  status    String      @default("pending")
  createdAt DateTime    @default(now())
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  price     Float
  quantity  Int     @default(1)
}
